C51 COMPILER V9.56.0.0   FUCKTORIAL                                                                    11/29/2023 16:41:24 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE FUCKTORIAL
OBJECT MODULE PLACED IN fucktorial.OBJ
COMPILER INVOKED BY: C:\Program Files\KEIL_5_956\C51\BIN\C51.EXE fucktorial.c ROM(SMALL) OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - CODE LISTINCLUDE SYMBOLS TABS(2)

line level    source

   1          /* Монолитный вариант.                                  Пример 1
   2             Пример нелокальных переходов. Вложенные комментарии. Условная компиляция.
   3             Маленькая программа, вычисляющая факториалы.
   4          // вложенные комментарии в IAR Systems, а здесь Keil
   5          */
   6          #pragma CODE
   7          #pragma PAGELENGTH(999)
   8          #pragma PAGEWIDTH(132)
   9          
  10          #define NoRecurs 0
  11          #define Param 3
  12          // ===============================================================
  13          #if Param == 0
              // ===== 0 вариант.
              #error Ошибка №1, этот фрагмент ещё не написан!
              /* . . . . . . . . . . . . . */
              #elif Param == 1
              // ===== 1 вариант.
              #error Ошибка №2, этот фрагмент всё ещё не написан!
              /* . . . . . . . . . . . . . */
              #elif Param == 2
              // ===== 2 вариант.
              #error Ошибка №3, этот фрагмент врядли напишу!
              /* . . . . . . . . . . . . . */
              #elif Param == 3
  26          // ===== 3 вариант. Нелокальные переходы.
  27          #define CnstMyFunc 40320         /* 5040 для факториала */
  28          #pragma small                   // явная модель памяти.
  29          #include <setjmp.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  SETJMP.H
   3      =1  
   4      =1  Prototypes for longjmp facility.
   5      =1  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  Copyright (c) 2008 ARM Germany GmbH
   7      =1  All rights reserved.
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  /* define the buffer type for holding the state information */
  11      =1  #ifndef __SETJMP_H__
  12      =1  #define __SETJMP_H__
  13      =1  
  14      =1   #if defined (__CX51__)
           =1   #define _JBLEN  9  /* SP, SPE, ?C_XBP, ?C_IBP, ?C_PBP, RET-ADDR */
           =1  #elif defined (__CX2__)
           =1   #define _JBLEN  7  /* SP, SPE, ?C_XBP, RET-ADDR */
           =1  #else
  19      =1    #define _JBLEN  7  /* RET-ADDR, ?C_XBP, ?C_IBP, ?C_PBP, SP */
  20      =1    /* for Dallas 390:          RET-ADDR, ?C_XBP, ?C_IBP, PCX,    SP */
  21      =1   #endif
  22      =1  
  23      =1  typedef  char jmp_buf[_JBLEN];
  24      =1  
  25      =1  /* function prototypes */
  26      =1  extern volatile int  setjmp  (jmp_buf);
  27      =1  extern volatile void longjmp (jmp_buf, int);
  28      =1  #endif
  29      =1  
  30          #include <stdio.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STDIO.H
   3      =1  
   4      =1  Prototypes for standard I/O functions.
   5      =1  Copyright (c) 1988-2002 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  All rights reserved.
   7      =1  --------------------------------------------------------------------------*/
   8      =1  
   9      =1  #ifndef __STDIO_H__
  10      =1  #define __STDIO_H__
  11      =1  
  12      =1  #ifndef EOF
  13      =1   #define EOF -1
  14      =1  #endif
  15      =1  
  16      =1  #ifndef NULL
  17      =1   #define NULL ((void *) 0)
  18      =1  #endif
  19      =1  
  20      =1  #ifndef _SIZE_T
  21      =1   #define _SIZE_T
  22      =1   typedef unsigned int size_t;
  23      =1  #endif
  24      =1  
  25      =1  #pragma SAVE
  26      =1  #pragma REGPARMS
  27      =1  extern char _getkey (void);
  28      =1  extern char getchar (void);
  29      =1  extern char ungetchar (char);
  30      =1  extern char putchar (char);
  31      =1  extern int printf   (const char *, ...);
  32      =1  extern int sprintf  (char *, const char *, ...);
  33      =1  extern int vprintf  (const char *, char *);
  34      =1  extern int vsprintf (char *, const char *, char *);
  35      =1  extern char *gets (char *, int n);
  36      =1  extern int scanf (const char *, ...);
  37      =1  extern int sscanf (char *, const char *, ...);
  38      =1  extern int puts (const char *);
  39      =1  
  40      =1  #pragma RESTORE
  41      =1  
  42      =1  #endif
  43      =1  
  31          #include <string.h>
   1      =1  /*--------------------------------------------------------------------------
   2      =1  STRING.H
   3      =1  
   4      =1  String functions.
   5      =1  Copyright (c) 1988-2008 Keil Elektronik GmbH and Keil Software, Inc.
   6      =1  Copyright (c) 2008-2016 ARM Germany GmbH
   7      =1  All rights reserved.
   8      =1  --------------------------------------------------------------------------*/
   9      =1  
  10      =1  #ifndef __STRING_H__
  11      =1  #define __STRING_H__
  12      =1  
  13      =1  #ifndef _SIZE_T
           =1  #define _SIZE_T
           =1  typedef unsigned int size_t;
           =1 #endif
  17      =1  
  18      =1  #ifndef NULL
           =1  #define NULL ((void *)0)
           =1 #endif
  21      =1  
  22      =1  #pragma SAVE
  23      =1  #pragma REGPARMS
  24      =1  extern char  *strcat  (char *s1, const char *s2);
  25      =1  extern char  *strncat (char *s1, const char *s2, size_t n);
  26      =1  
  27      =1  extern char   strcmp  (const char *s1, const char *s2);
  28      =1  extern char   strncmp (const char *s1, const char *s2, size_t n);
  29      =1  
  30      =1  extern char  *strcpy  (char *s1, const char *s2);
  31      =1  extern char  *strncpy (char *s1, const char *s2, size_t n);
  32      =1  
  33      =1  extern size_t strlen  (const char *);
  34      =1  
  35      =1  extern char  *strchr  (const char *s, char c);
  36      =1  extern int    strpos  (const char *s, char c);
  37      =1  extern char  *strrchr (const char *s, char c);
  38      =1  extern int    strrpos (const char *s, char c);
  39      =1  
  40      =1  extern size_t strspn  (const char *s, const char *set);
  41      =1  extern size_t strcspn (const char *s, const char *set);
  42      =1  extern char  *strpbrk (const char *s, const char *set);
  43      =1  extern char  *strrpbrk(const char *s, const char *set);
  44      =1  extern char  *strstr  (const char *s, const char *sub);
  45      =1  extern char  *strtok  (char *str, const char *set);
  46      =1  
  47      =1  extern char   memcmp  (const void *s1, const void *s2, size_t n);
  48      =1  extern void  *memcpy  (void *s1, const void *s2, size_t n);
  49      =1  extern void  *memchr  (const void *s, char val, size_t n);
  50      =1  extern void  *memccpy (void *s1, const void *s2, char val, size_t n);
  51      =1  extern void  *memmove (void *s1, const void *s2, size_t n);
  52      =1  extern void  *memset  (void *s, char val, size_t n);
  53      =1  #pragma RESTORE
  54      =1  
  55      =1  #endif
  32          
  33          // ----- рабочие переменные
  34          jmp_buf vJumper;
  35          unsigned int iN;
  36          static char cResult[ 11 ];
  37          static unsigned int iValCT, iC = 0;
  38          
  39          #if NoRecurs 
              //static int Fact( int iNum );
              #else
  42          static int fibonacci( int iNum ) reentrant;
  43          #endif
  44          void fSubroutine( void );
  45          
  46          // ===============================================================
  47          void main( void ) {
  48   1      /***** Подготовка к работе.
  49   1         -включить прогрев; -вкл. ВЧ ген.; -подать высокое. */
  50   1        iN = 666;
  51   1        strcpy( cResult, "Start!" );
  52   1        iValCT = setjmp( vJumper );
  53   1      /* <<<<< Точка входа. Работа блока.
  54   1         -30-40 мин прогрев на 5 градусов. */
  55   1        if ( iValCT != 0 ) { // не первый вход!
  56   2          iN = fibonacci( iValCT );
  57   2          if ( iN >= CnstMyFunc ) {
  58   3            strcpy( cResult, "Finish!" );
  59   3            goto Lexit;
  60   3          }
  61   2        }
  62   1        else iN = -1;
  63   1        iN = sprintf( cResult, "N=%d i=%d", iN, iValCT );
  64   1        fSubroutine();
  65   1      /***** Завершение.
  66   1        -снять высокое; выкл. ген.; -вентил. охл. 5 мин. */
  67   1      Lexit:
  68   1        while (1) {}
  69   1      }
  70          
  71          // ===============================================================
  72          // Вычисление факториала.
  73          #if NoRecurs 
              // Обычный расчет факториала в цикле.
              
              #else
  77          // Рекурсивный расчет факториала.
  78          fibonacci(char n) reentrant {
*** WARNING C235 IN LINE 78 OF fucktorial.c: parameter 1: different types
  79   1          if (n == 0)
  80   1              return 0;
  81   1          else if (n == 1)
  82   1              return 1;
  83   1      
  84   1          return fibonacci(n - 1) + fibonacci(n - 2);
  85   1      }
  86          //int Fact( int iNum ) reentrant {
  87          //  if ( iNum < 0 ) return 0;
  88          //  if ( iNum == 0 ) return 1;
  89          //  return  Fact( iNum - 1 )* iNum;
  90          //}
  91          #endif
  92          
  93          // ===============================================================
  94          // Вспомогательная функция.
  95          /* В прерывании longjmp(...) */
  96          void fSubroutine( void ) {
  97   1      /* ... */
  98   1        longjmp( vJumper, ++iC );
  99   1      /* ... */
 100   1      }
 101          #else
              // ===== 4 Последний вариант.
              #message "Этот фрагмент до конца не написан!"
              /* . . . . . . .
                для IAR Systems
                 . . . . . . . */
              #endif
 108          
C51 COMPILER V9.56.0.0   FUCKTORIAL                                                                    11/29/2023 16:41:24 PAGE 2   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 50
0000 750002      R     MOV     iN,#02H
0003 75009A      R     MOV     iN+01H,#09AH
                                           ; SOURCE LINE # 51
0006 7800        R     MOV     R0,#LOW cResult
0008 7C00        R     MOV     R4,#HIGH cResult
000A 7D00              MOV     R5,#00H
000C 7BFF              MOV     R3,#0FFH
000E 7A00        R     MOV     R2,#HIGH ?SC_0
0010 7900        R     MOV     R1,#LOW ?SC_0
0012 1100        E     ACALL   ?C?STRCPY
                                           ; SOURCE LINE # 52
0014 7B00              MOV     R3,#00H
0016 7A00        R     MOV     R2,#HIGH vJumper
0018 7900        R     MOV     R1,#LOW vJumper
001A 1100        E     ACALL   _setjmp
001C 8E00        R     MOV     iValCT,R6
001E 8F00        R     MOV     iValCT+01H,R7
                                           ; SOURCE LINE # 55
0020 E500        R     MOV     A,iValCT+01H
0022 4500        R     ORL     A,iValCT
0024 6024              JZ      ?C0001
                                           ; SOURCE LINE # 56
0026 1100        R     ACALL   _?fibonacci
0028 8E00        R     MOV     iN,R6
002A 8F00        R     MOV     iN+01H,R7
                                           ; SOURCE LINE # 57
002C E4                CLR     A
002D FC                MOV     R4,A
002E FD                MOV     R5,A
002F 7B80              MOV     R3,#080H
0031 7A9D              MOV     R2,#09DH
0033 F9                MOV     R1,A
0034 F8                MOV     R0,A
0035 D3                SETB    C
0036 1100        E     ACALL   ?C?SLCMP
0038 5016              JNC     ?C0004
                                           ; SOURCE LINE # 58
003A 7800        R     MOV     R0,#LOW cResult
003C 7C00        R     MOV     R4,#HIGH cResult
003E 7D00              MOV     R5,#00H
0040 7BFF              MOV     R3,#0FFH
0042 7A00        R     MOV     R2,#HIGH ?SC_7
0044 7900        R     MOV     R1,#LOW ?SC_7
0046 1100        E     ACALL   ?C?STRCPY
                                           ; SOURCE LINE # 59
0048 8029              SJMP    ?C0005
                                           ; SOURCE LINE # 60
                                           ; SOURCE LINE # 61
004A         ?C0001:
                                           ; SOURCE LINE # 62
004A 74FF              MOV     A,#0FFH
004C F500        R     MOV     iN,A
004E F500        R     MOV     iN+01H,A
0050         ?C0004:
                                           ; SOURCE LINE # 63
0050 7500FF      E     MOV     ?_sprintf?BYTE+03H,#0FFH
0053 750000      R     MOV     ?_sprintf?BYTE+04H,#HIGH ?SC_15
0056 750000      R     MOV     ?_sprintf?BYTE+05H,#LOW ?SC_15
0059 850000      E     MOV     ?_sprintf?BYTE+06H,iN
005C 850000      E     MOV     ?_sprintf?BYTE+07H,iN+01H
005F 850000      E     MOV     ?_sprintf?BYTE+08H,iValCT
0062 850000      E     MOV     ?_sprintf?BYTE+09H,iValCT+01H
0065 7B00              MOV     R3,#00H
0067 7A00        R     MOV     R2,#HIGH cResult
0069 7900        R     MOV     R1,#LOW cResult
006B 1100        E     ACALL   _sprintf
006D 8E00        R     MOV     iN,R6
006F 8F00        R     MOV     iN+01H,R7
                                           ; SOURCE LINE # 64
0071 1100        R     ACALL   fSubroutine
                                           ; SOURCE LINE # 67
0073         Lexit:
0073         ?C0005:
                                           ; SOURCE LINE # 68
0073 80FE              SJMP    ?C0005
             ; FUNCTION main (END)

             ; FUNCTION _?fibonacci (BEGIN)
                                           ; SOURCE LINE # 78
0000 1500        E     DEC     ?C_IBP
0002 A800        E     MOV     R0,?C_IBP
0004 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 79
0006 A800        E     MOV     R0,?C_IBP
0008 E6                MOV     A,@R0
0009 FD                MOV     R5,A
000A 7004              JNZ     ?C0008
                                           ; SOURCE LINE # 80
000C FE                MOV     R6,A
000D FF                MOV     R7,A
000E 803A              SJMP    ?C0009
0010         ?C0008:
                                           ; SOURCE LINE # 81
0010 ED                MOV     A,R5
0011 B40106            CJNE    A,#01H,?C0010
                                           ; SOURCE LINE # 82
0014 7E00              MOV     R6,#00H
0016 7F01              MOV     R7,#01H
0018 8030              SJMP    ?C0009
001A         ?C0010:
                                           ; SOURCE LINE # 84
001A A800        E     MOV     R0,?C_IBP
001C E6                MOV     A,@R0
001D FF                MOV     R7,A
001E 33                RLC     A
001F 95E0              SUBB    A,ACC
0021 FE                MOV     R6,A
0022 EF                MOV     A,R7
0023 24FE              ADD     A,#0FEH
0025 FF                MOV     R7,A
0026 EE                MOV     A,R6
0027 34FF              ADDC    A,#0FFH
0029 FE                MOV     R6,A
002A 1100        R     ACALL   _?fibonacci
002C C006              PUSH    AR6
002E C007              PUSH    AR7
0030 A800        E     MOV     R0,?C_IBP
0032 E6                MOV     A,@R0
0033 FF                MOV     R7,A
0034 33                RLC     A
0035 95E0              SUBB    A,ACC
0037 FE                MOV     R6,A
0038 EF                MOV     A,R7
0039 24FF              ADD     A,#0FFH
003B FF                MOV     R7,A
003C EE                MOV     A,R6
003D 34FF              ADDC    A,#0FFH
003F FE                MOV     R6,A
0040 1100        R     ACALL   _?fibonacci
0042 D0E0              POP     ACC
0044 2F                ADD     A,R7
0045 FF                MOV     R7,A
0046 D0E0              POP     ACC
0048 3E                ADDC    A,R6
0049 FE                MOV     R6,A
                                           ; SOURCE LINE # 85
004A         ?C0009:
004A 0500        E     INC     ?C_IBP
004C 22                RET     
             ; FUNCTION _?fibonacci (END)

             ; FUNCTION fSubroutine (BEGIN)
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 98
0000 7B00              MOV     R3,#00H
0002 7A00        R     MOV     R2,#HIGH vJumper
0004 7900        R     MOV     R1,#LOW vJumper
0006 0500        R     INC     iC+01H
0008 E500        R     MOV     A,iC+01H
000A 7002              JNZ     ?C0013
000C 0500        R     INC     iC
000E         ?C0013:
000E FD                MOV     R5,A
000F AC00        R     MOV     R4,iC
0011 0100        E     AJMP    _longjmp
             ; FUNCTION fSubroutine (END)

C51 COMPILER V9.56.0.0   FUCKTORIAL                                                                    11/29/2023 16:41:24 PAGE 3   

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_sprintf . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
size_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_setjmp. . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----
fSubroutine. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_?fibonacci. . . . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----
  n. . . . . . . . . . . . . . . . . .  AUTO     IDATA  CHAR     0000H  1
iValCT . . . . . . . . . . . . . . . .  STATIC   DATA   U_INT    0000H  2
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Lexit. . . . . . . . . . . . . . . .  LABEL    CODE   LABEL    -----  -----
iC . . . . . . . . . . . . . . . . . .  STATIC   DATA   U_INT    0002H  2
iN . . . . . . . . . . . . . . . . . .  PUBLIC   DATA   U_INT    0004H  2
cResult. . . . . . . . . . . . . . . .  STATIC   DATA   ARRAY    0006H  11
jmp_buf. . . . . . . . . . . . . . . .  TYPEDEF  -----  ARRAY    -----  7
vJumper. . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0011H  7
_longjmp . . . . . . . . . . . . . . .  EXTERN   CODE   PROC     -----  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    213    ----
   CONSTANT SIZE    =     25    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     24    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
